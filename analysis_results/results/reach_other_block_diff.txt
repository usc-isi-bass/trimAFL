Diff loaded blocks:
TIFFInitLZW
LZWSetupDecode
LZWPreDecode
LZWDecode
putRGBcontig8bittile

========

Diff infunc blocks:
TIFFReadDirectoryCheckOrder+0xab
TIFFReadDirectoryCheckOrder+0xdf
TIFFReadDirEntryShort+0x61
TIFFReadDirectory+0x16c6
TIFFReadDirectory+0x16e7
TIFFReadDirectory+0x1eb7
TIFFReadDirectory+0x140c
TIFFReadDirectory+0x221d
TIFFReadDirectory+0x224e
TIFFReadDirectory+0x29fe
TIFFReadDirectory+0x3209
TIFFReadDirectory+0x3227
TIFFReadDirectory+0x324c
TIFFScanlineSize64+0x13a
TIFFScanlineSize64+0x166
TIFFScanlineSize64+0x17b
TIFFStripSize+0x6b
TIFFVStripSize64+0x142
TIFFVStripSize64+0x160
TIFFVStripSize64+0x173
TIFFVTileSize64+0x17b
TIFFVTileSize64+0x19a
TIFFVTileSize64+0x1ad
TIFFRGBAImageOK+0x456
TIFFRGBAImageBegin+0x724
TIFFRGBAImageBegin+0xfdc
TIFFRGBAImageBegin+0x100d
TIFFRGBAImageBegin+0x1017
TIFFRGBAImageBegin+0x1690
TIFFRGBAImageBegin+0x18d1
TIFFRGBAImageBegin+0x18ef
gtStripContig+0x380
TIFFReadEncodedStripGetStripSize+0xc0
TIFFReadEncodedStripGetStripSize+0x159
_TIFFReadEncodedStripAndAllocBuffer+0x4e
TIFFStartStrip+0x8a
_TIFFReadEncodedStripAndAllocBuffer+0x6b
TIFFRGBAImageEnd+0x153

========

Diff other blocks:
LZWFixupTags
TIFFTileRowSize64
TIFFTileRowSize64+0x3d
TIFFTileRowSize64+0x5f
TIFFTileRowSize64+0x7f
TIFFTileRowSize64+0x89
TIFFTileRowSize64+0xbe
TIFFTileRowSize64+0xdd
TIFFTileRowSize64+0x114
TIFFTileRowSize64+0x1c1
TIFFReadEncodedStrip
TIFFReadEncodedStrip+0x47
TIFFReadEncodedStrip+0x60
TIFFReadEncodedStrip+0x82
TIFFReadEncodedStrip+0x1da
TIFFReadEncodedStrip+0x1f4
TIFFReadEncodedStrip+0x253
TIFFReadEncodedStrip+0x272
TIFFReadEncodedStrip+0x282
TIFFReadEncodedStrip+0x2ab
TIFFReadEncodedStrip+0x2f7
LZWCleanup
LZWCleanup+0x30
LZWCleanup+0x4b
LZWCleanup+0x6a
LZWCleanup+0x85
LZWCleanup+0x96
LZWCleanup+0xe3
LZWCleanup+0x107

========

# Script
```
# Complete a cfg with the reach_trace
# record all patched unresolvable caller
# Check the difference resolving blocks in other_trace
cfg_r = cfg.copy()
cg_r= cg.copy()

unreachable_callers = cfg_patch.find_unresolved_callers(proj, cfg_r)

patch_edges = {}
for caller in unreachable_callers:
    if caller not in reach_trace:
        continue
    caller_idx = 0
    callee_addresses = set()
    for i in range(reach_trace.count(caller)):
        caller_idx = reach_trace.index(caller, caller_idx)
        caller_idx += 1
        callee = reach_trace[caller_idx]
        callee_addresses.add(callee.addr)
    patch_edges[caller.addr] = callee_addresses

cfg_patch.patch_cfg_cg_with_caller_dict(proj, cfg_r, cg_r, patch_edges)

ep_node = cfg_r.model.get_any_node(proj.entry)

from networkx.algorithms.shortest_paths.generic import has_path
for node in cfg_r.model.nodes():
    if node is None:
        continue
    if node.name == target:
        print("CFG reachable: %s" % has_path(cfg_r.graph, ep_node, node))
        print("CG  reachable: %s" % has_path(cg_r, proj.entry, node.addr))


# Then, we look at the other trace
other_trace = cfg_patch.get_blocks_with_tracer(proj, cfg, binary, other_input)
other_seen = []

diff_loaded_blocks = []
diff_loaded_functions = []
diff_infunc_blocks = []
diff_unknown_blocks = []
for idx in range(len(other_trace)):
    block = other_trace[idx]
    if block in other_seen:
        continue
    else:
        other_seen.append(block)
    if block.addr not in reach_set:
        if block.function_address in reach_func_set:
            diff_infunc_blocks.append(block)
            continue
        pre_block = other_trace[idx-1]
        if pre_block in unreachable_callers:
            diff_loaded_blocks.append(block)
            diff_loaded_functions.append(block.function_address)
            continue
        if block.function_address in diff_loaded_functions:
            continue
        diff_unknown_blocks.append(block)
    else:
        continue

print("Diff loaded blocks:")
for block in diff_loaded_blocks:
    print(block.name)

print("\n========\n")

print("Diff infunc blocks:")
for block in diff_infunc_blocks:
    print(block.name)

print("\n========\n")

print("Diff other blocks:")
for block in diff_unknown_blocks:
    print(block.name)

print("\n========\n")
```
