target:
PixarLogDecode

multiple paths combining

comparing to LDxx


--------
CFG reachable: True
CG  reachable: True
--------
Parents:
PredictorDecodeTile+0x6f
  PixarLogDecode

_TIFFReadEncodedStripAndAllocBuffer+0x1e3
  PixarLogDecode
  PredictorDecodeTile

TIFFReadEncodedStrip+0x282
  PixarLogDecode
  PredictorDecodeTile


---------------------------------


Diff loaded blocks:
TIFFInitLZW
LZWSetupDecode
LZWPreDecode
LZWDecode

========

Diff infunc blocks:
TIFFReadDirEntryShort+0x61

========

Diff other blocks:
LZWFixupTags
LZWCleanup
LZWCleanup+0x30
LZWCleanup+0x4b
LZWCleanup+0x6a
LZWCleanup+0x85
LZWCleanup+0x96
LZWCleanup+0xe3
LZWCleanup+0x107

========


---------------------------------

# Script
```
_path_dir = "/home/weicheng/directed_fuzzer/trimafl/analysis_results/reach_paths/PixarLogDecode/all_inputs/"
binary = "./analysis_results/tiff_read_rgba_fuzzer"
target = "PixarLogDecode"
other_input = "./analysis_results/reach_paths/LZWDecode/input"

trim_proj = TrimAFL(binary, target, False)

proj = trim_proj.project
cfg = trim_proj.cfg
cg = trim_proj.cg

cfg_r = cfg.copy()
cg_r= cg.copy()

unreachable_callers = cfg_patch.find_unresolved_callers(proj, cfg_r)

# key: caller_addr
# value: set of callee_addr
edges_to_patch = {}
for caller in unreachable_callers:
    edges_to_patch[caller.addr] = set()


reach_set = set()
reach_func_set = set()

interesting_parent = set()
for f in os.listdir(r_path_dir):
    in_f = "%s/%s" % (r_path_dir, f)
    reach_trace = cfg_patch.get_blocks_with_tracer(proj, cfg_r, binary, in_f)
    for block in reach_trace:
        if block is not None:
            reach_set.add(block.addr)
            if block.function_address is not None:
                reach_func_set.add(block.function_address)

    for caller in unreachable_callers:
        caller_idx = 0
        for i in range(reach_trace.count(caller)):
            caller_idx = reach_trace.index(caller, caller_idx)
            caller_idx += 1
            callee = reach_trace[caller_idx]
            if callee.name == target:
                interesting_parent.add(caller)
            if callee is not None:
                edges_to_patch[caller.addr].add(callee.addr)


cfg_patch.patch_cfg_cg_with_caller_dict(proj, cfg_r, cg_r, edges_to_patch)

ep_node = cfg_r.model.get_any_node(proj.entry)

from networkx.algorithms.shortest_paths.generic import has_path
for node in cfg_r.model.nodes():
    if node is None:
        continue
    if node.name == target:
        print("--------")
        print("CFG reachable: %s" % has_path(cfg_r.graph, ep_node, node))
        print("CG  reachable: %s" % has_path(cg_r, proj.entry, node.addr))
        print("--------")
        print("Parents:")
        for node in interesting_parent:
            print(node.name)
            for s in cfg_r.model.get_successors(node):
                print("  " + s.name)
            print("")

print("")
print("==================")
print("")


# Then, we look at the other trace
other_trace = cfg_patch.get_blocks_with_tracer(proj, cfg, binary, other_input)
other_seen = []

diff_loaded_blocks = []
diff_loaded_functions = []
diff_infunc_blocks = []
diff_unknown_blocks = []
for idx in range(len(other_trace)):
    block = other_trace[idx]
    if block in other_seen:
        continue
    else:
        other_seen.append(block)
    if block.addr not in reach_set:
        if block.function_address in reach_func_set:
            diff_infunc_blocks.append(block)
            continue
        pre_block = other_trace[idx-1]
        if pre_block in unreachable_callers:
            diff_loaded_blocks.append(block)
            diff_loaded_functions.append(block.function_address)
            continue
        if block.function_address in diff_loaded_functions:
            continue
        diff_unknown_blocks.append(block)
    else:
        continue

print("Diff loaded blocks:")
for block in diff_loaded_blocks:
    print(block.name)

print("\n========\n")

print("Diff infunc blocks:")
for block in diff_infunc_blocks:
    print(block.name)

print("\n========\n")

print("Diff other blocks:")
for block in diff_unknown_blocks:
    print(block.name)

print("\n========\n")
```
