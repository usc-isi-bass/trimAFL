TIFFPredictorCleanup
False
False

PredictorSetup
True
False

PixarLogFixupTags
False
False

PixarLogSetupDecode
True
False

putcontig8bitYCbCr22tile
True
False

tagCompare
False
False

PixarLogCleanup
False
False

PixarLogPreDecode
True
False

PixarLogVGetField
True
False

PixarLogDecode
True
False

deregister_tm_clones
False
False

register_tm_clones
True
False

PixarLogVSetField
True
False

frame_dummy
True
False

handle_error
False
False

gtStripContig
True
False

PredictorVGetField
True
False

TIFFYCbCrtoRGB
True
False

PredictorVSetField
True
False

PredictorSetupDecode
True
False

TIFFInitPixarLog
True
False

TIFFInitDumpMode
True
False


# Script
```
cfg_r = cfg.copy()
cg_r= cg.copy()

unreachable_callers = cfg_patch.find_unresolved_callers(proj, cfg_r)

patch_edges = {}
for caller in unreachable_callers:
    if caller not in reach_trace:
        continue
    caller_idx = 0
    callee_addresses = set()
    for i in range(reach_trace.count(caller)):
        caller_idx = reach_trace.index(caller, caller_idx)
        caller_idx += 1
        callee = reach_trace[caller_idx]
        callee_addresses.add(callee.addr)
    patch_edges[caller.addr] = callee_addresses

cfg_patch.patch_cfg_cg_with_caller_dict(proj, cfg_r, cg, patch_edges)

ep_node = cfg_r.model.get_any_node(proj.entry)

from networkx.algorithms.shortest_paths.generic import has_path
for node in cfg_r.model.nodes():
    if node is None:
        continue
    if node.name == target:
        print(has_path(cfg_r.graph, ep_node, node))
        print(has_path(cg_r, proj.entry, node.addr))
        # Both False, gg

# See which exact blocks are still unreached in reach_set
seen_names = set()
for block_addr in reach_set:
    node = cfg_r.model.get_any_node(block_addr)
    if node is None or node.name is None:
        continue
    if has_path(cfg.graph, ep_node, node):
        continue
    name = node.name.split("+")[0]
    if name in seen_names:
        continue
    else:
        seen_names.add(name)
    if name.startswith("_"):
        continue
    print(name)
    node = cfg.model.get_any_node(node.function_address)
    print(has_path(cfg_r.graph, ep_node, node))
    print(has_path(cg_r, proj.entry, node.function_address))
    print()
```
